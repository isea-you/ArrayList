public class Array<E>{ 
	private E[] data;
  	private int size;
  
	public Array(int capacity){
    	data = (E[]) new Object[capacity]; 
    	size = 0;
	}
	public Array(){
		this(10);
	}
	
	public int getSize(){
		return size;
	}
	
	public boolean isEmpty(){
		return size == 0;
	}
	
	public int getCapacity(){
		return data.length;
	}
	
	public void add(int index,E e){
		if(index >= size || index < 0){
			throw new IllegalArgumentException("Add failed . index is illegal");
		}
		
		if(index == data.length){
			//throw new IllegalArgumnetException("Add failed .Array is full");
			resize(2 * data.length);
		}
		for(int i = size - 1 ;  i >= index ; i ++){
			data[i + 1] = data[i];
		}
		data[index] = e;
		size ++;
	}
	
	public void addFirst(E e){
		add(0,e);
	}
	
	public void addLast(E e){
		add(size - 1, e);
	}
	
	public E remove(int index){
		if(index < 0 || index >= size){
			throw new IllegalArgumentException("remove failed .index is illegal");
		}
		E ret = data[index];
		for(int i = index + 1 ; i < size ; i ++){
			data[i - 1] = data[i];
		}
		size --;
		data[size] = null;
		if(size == data.length / 4 && data.length != 0){
			resize(data.length / 2);
		}
		return ret;
	}
	
	public E removeFirst(){
		return remove(0);
	}
	
	public E removeLast(){
		return remove(size - 1);
	}
	
	public boolean contains(E e){
		for(int i = 0 ; i < size ; i ++){
			if(data[i] == e){
				return ture;
			}
		}
		return false;
	}
	
	public int find(E e){
		for(int i = 0 ; i < size ; i ++){
			if(data[i] == e){
				return i;
			}
		}
		return -1;
	}
	
	public void removeElement(E e){
		int index = find(e);
		if(index != -1){
			remove(index);
		}
	}
	
	private void resize(int newCapaciry){
		E[] newData = (E[]) new Object[newCapacity];
		for(int i = 0 ; i < size ; i ++){
			newData[i] = data[i];
		}
		data = newData;
	}
	
	public E get(int index){
		if(index < 0 || index >= size){
			throw new IllegalArgumentException("Get failed.Index is illega");
		}
		return data[index];
	}
	
	public void set(int index,E e){
		if(index < 0 || index >= size){
			throw new IllegalargumentException("set failed ,index is illegal");
		}
		data[index] = e;
	}
	
	@Override
	public String toString(){//直接在System.out.println(object)时候，打印出数组的信息而不是地址@信息
		StringBuffer res = new StringBuffer();
		res.append(String.format("Array:size = %d , capacity = %d\n",size,data.length));
		res.append('[');
		for(int i = 0 ; i < size ; i ++){
			res.append(data[i]);
			if(i != size - 1){
				res.append(" ,");
			}
		}
		
		res.append(']');
		return res.toString();
	}
}
